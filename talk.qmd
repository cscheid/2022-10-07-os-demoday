---
format: revealjs
title: Lua Filters in quarto 1.3
author: Carlos Scheidegger
---

## Extensibility today

Pandoc filters [example](lower.html), with apologies to [e e cummings](https://en.wikipedia.org/wiki/E._E._Cummings):

```lua
function Para(para)
  for i,v in ipairs(para.content) do
    if v.t == "Str" then
      para.content[i] = pandoc.Str(
        pandoc.utils.stringify(v):lower())
    end
  end
  return para
end
```

. . .

They are great if you want to process simple Pandoc objects.


## But quarto has complex objects

- Tables

- Figures

  - and subfigures!

    - ... with different layouts!

- Citations

- Listings

- Code cells

- Code cell outputs

  - which can be figures, ...subfigures! ... different layouts!



## Specifics: How do we represent a callout?

- It's a pandoc div with elements laid out in a careful order

- This is pretty brittle to construct and deconstruct and extend

- Especially, other filters need to know if they're going to unintentionally process a callout (or theorem, or table, or citation, or figure, or code cell, ...)


## In quarto 1.3

- These specific objects will become first-class citizens in the AST.

- We reimplement the filter infrastructure in Lua

. . .

```lua
function Callout(callout)
  if callout.caption == nil then
    callout.caption = pandoc.Inlines({"A default callout title"})
  end
end
```

- [example](callout-ast-example.html)

## Bonus: custom writers

Pandoc's [custom output formats](https://pandoc.org/custom-writers.html) are not ideal.

... so format outputs in quarto 1.3 will look much more like filters.

## Example custom writer

- "Standard" Pandoc nodes have default handlers: (spaces, line breaks, strings)

- Other nodes are treated the same as filters, by walking the AST, incorporating custom nodes.

## {}

[(generated output for the callout example)](callout-ast-example.txt)

```lua
function Pandoc(doc, emit)
    emit("<doc>")
    emit(doc.blocks)
    emit("</doc>")
end

function Callout(callout, emit)
    emit("<callout>")
    if callout.caption then
        emit("<title>")
        emit(callout.caption)
        emit("</title>")
    end
    emit("<content>")
    emit(callout.div)
    emit("</content>")
    emit("</callout>")
end
```